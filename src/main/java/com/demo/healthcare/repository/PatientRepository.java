package com.demo.healthcare.repository;

import com.demo.healthcare.demo.jpql.PatientDTO;
import com.demo.healthcare.model.Gender;
import com.demo.healthcare.model.Patient;
import jakarta.transaction.Transactional;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface PatientRepository extends JpaRepository<Patient, Long> {

//    List<Patient> findByName(String name);      // Spring Data. Without the help of JPQL.

    // With the help of JPQL, using NAMED
//    @Query("select p from Patient p where p.name = :name and p.gender = :gender")
//    List<Patient> findByNameAndGender(@Param("name") String name, @Param("gender") Gender gender);

    // Using POSITIONAL
//    @Query("select p from Patient p where p.name = ?1 and p.gender = ?2")
//    List<Patient> findByNameAndGender(String name, Gender gender);

    // DERIVED QUERIES (JPQL is generated by JPA)
    List<Patient> findByName(String name);

    List<Patient> findByNameAndGender(String name, Gender gender);

    List<Patient> findByAgeGreaterThan(int age);    // select p from Patient p where p.age > ?1

    List<Patient> findByEmailContaining(String s);  // select p from Patient where email like %?1%

    Patient findByDoctorName(String name);   // select p from Patient p where p.doctor.name = ?1

    boolean existsByEmail(String email);

    int countByAge(int age);

    // COMPARISON OPERATORS (<>, >, <, <= >=, =)
    @Query("select p from Patient p where p.age > :minAge")
    List<Patient> findOlderThan(@Param("minAge") int age);

    // PATTERN MATCHING
    @Query("select p from Patient p where p.name not like :prefix%")
    List<Patient> findByNameNotStartingWith(@Param("prefix") String prefix);

    @Query("select p from Patient p where p.gender in :genders")
    List<Patient> findByGenders(@Param("genders") List<Gender> genders);

    @Query("select p from Patient p where p.age between :start and :end")
    List<Patient> findByAgeRange(@Param("start") int start, @Param("end") int end);

    @Query("select p from Patient p where p.doctor is null")
    List<Patient> findUnassignedDoctorForPatient();

    @Query("select p from Patient p where p.doctor is not null")
    List<Patient> findPatientsWithAssignedDoctor();

    // SORTING RESULTS
    @Query("select p from Patient p order by p.age asc")
    List<Patient> sortByAgeAsc();

    @Query("select p from Patient p order by p.age desc, p.name asc")
    List<Patient> sortByAgeDescAndNameAsc();

    @Query("select p from Patient p where p.gender = ?1 order by p.age desc")
    List<Patient> findByGenderSortByAgeDesc(Gender gender);

    // INNER JOIN
    @Query("select p from Patient p inner join p.doctor d where d.specialization = :spec")
    List<Patient> findPatientsWithADoctor(@Param("spec") String specialization);

    // LEFT JOIN
    @Query("select p from Patient p left join p.doctor d")
    List<Patient> findPatientsWithOrWithoutAssignedDoctor();

    // JOIN FETCH (will include Doctor data!)
    @Query("select p from Patient p join fetch p.doctor d ")
    List<Patient> findPatientsWithADoctorJoinFetch();

    // AGGREGATION AND GROUPING
    @Query("select p.gender, avg(p.age) from Patient p group by p.gender")
    List<Object[]> averageAgeByGender();

    // BULK UPDATE
    @Modifying          // Update/Delete queries must be annotated as modifying data!
    @Transactional      // Data modifying queries must be executed within a transaction!
    @Query("update Patient p set p.age = p.age + 1 where p.gender = :gender")
    int bulkIncreaseAgeByGender(@Param("gender") Gender gender);

    // BULK DELETE
    @Modifying
    @Transactional
    @Query("delete from Patient p where p.age < ?1")
    int bulkDeleteByAge(int age);

    // CONSTRUCTOR EXPRESSIONS QUERIES (Good for fetching data straight to a DTO!)
    @Query("select new com.demo.healthcare.demo.jpql.PatientDTO(p.name, p.age) from Patient p")
    List<PatientDTO> getPatientDTO();

    // NAMED QUERY
}
